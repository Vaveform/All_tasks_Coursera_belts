
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <string>
using namespace std;


void come(vector<bool>& deque, int& num)
{
	while(num > 0)
	{
		deque.push_back(true);
		num--;
	}
}

void worry(vector<bool>& deque, int index)
{
	deque.at(index) = false;
}

void deleted(vector<bool>& deque, int& num)
{
	while(num < 0)
	{
		deque.pop_back();
		num++;
	}
}

void quiet(vector<bool>& deque, int index)
{
	deque.at(index) = true;
}

void worry_count(const vector<bool>& deque)
{
	cout << count(deque.begin(), deque.end(), false) << endl;
}

int main()
{
	vector<bool> deque;
	int operations;
	string operation;
	int parametr;
	cin >> operations;
	while(operations > 0)
	{
		cin >> operation >> parametr;
		switch(operation)
		{
		case "COME":
		{
			if(parametr > 0)
			{
				come(deque, parametr);
			}
			else
			{
				deleted(deque, parametr);
			}
			break;
		}
		case "WORRY":
		{
			worry(deque, parametr);
			break;
		}
		case "QUIET":
		{
			quiet(deque, parametr);
			break;
		}
		case "WORRY_COUNT":
		{
			worry_count(deque);
			break;
		}
		}
	}
	return 0;
}
