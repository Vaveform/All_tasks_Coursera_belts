#include <iostream>
#include <map>
#include <string>
#include <vector>

using namespace std;

string FindNameByYear(const map<int, string> &names, int year) {
    string name;
    for (const auto &item : names) {
        if (item.first <= year) {
            name = item.second;
        } else {
            break;
        }
    }
    return name;
}
vector<string> FindHistoryByYear(const map<int, string> &names, int year) {
    vector<string> name;
    for (const auto &item : names) {
        if (item.first <= year) {
            name.push_back(item.second);
        } else {
            break;
        }
    }
    return name;
}
class Person {
    public:
        void ChangeFirstName(int year, const string &first_name) {
            if (first_names[year].empty())
                first_names[year] = first_name;
        }
        void ChangeLastName(int year, const string &last_name) {
            if (last_names[year].empty())
                last_names[year] = last_name;
        }
        string GetFullName(int year) {
            const string first_name = FindNameByYear(first_names, year);
            const string last_name = FindNameByYear(last_names, year);
            if (first_name.empty() && last_name.empty()) {
                return "Incognito";
            } else if (first_name.empty()) {
                return last_name + " with unknown first name";
            } else if (last_name.empty()) {
                return first_name + " with unknown last name";
            } else {
                return first_name + " " + last_name;
            }
        }
        string GetFullNameWithHistory(int year) {
            const vector<string> first_name = FindHistoryByYear(first_names, year);
            const vector<string> last_name = FindHistoryByYear(last_names, year);
            if (first_name.empty() && last_name.empty()) {
                return "Incognito";
            } else if (first_name.empty()) {
                string output;
                output.clear();
                int k_init = 0;
                int vec_size = last_name.size();
                output += last_name[vec_size - 1];
                for (int i = vec_size - 2; i >= 0; i--) {
                    if (last_name[i + 1] != last_name[i]) {
                        if (k_init == 0) {
                            output += " (" + last_name[i];
                            k_init = 1;
                        } else
                            output += ", " + last_name[i];
                    }
                }
                if (k_init == 1)
                    output += ")";
                return output + " with unknown first name";
            } else if (last_name.empty()) {
                string output;
                output.clear();
                int k_init = 0;
                int vec_size = first_name.size();
                output += first_name[vec_size - 1];
                for (int i = vec_size - 2; i >= 0; i--) {
                    if (first_name[i + 1] != first_name[i]) {
                        if (k_init == 0) {
                            output += " (" + first_name[i];
                            k_init = 1;
                        } else
                            output += ", " + first_name[i];
                    }
                }
                if (k_init == 1)
                    output += ")";
                return output + " with unknown last name";
            } else {
                string output_n;
                output_n.clear();
                int k_init_f = 0;
                int k_init_s = 0;
                int vec_size = first_name.size();
                output_n += first_name[vec_size - 1];
                for (int i = vec_size - 2; i >= 0; i--) {
                    if (first_name[i + 1] != first_name[i]) {
                        if (k_init_f == 0) {
                            output_n += " (" + first_name[i];
                            k_init_f = 1;
                        } else
                            output_n += ", " + first_name[i];
                    }
                }
                if (k_init_f == 1)
                    output_n += ")";
                string output_s;
                output_s.clear();
                vec_size = last_name.size();
                output_s += last_name[vec_size - 1];
                for (int i = vec_size - 2; i >= 0; i--) {
                    if (last_name[i + 1] != last_name[i]) {
                        if (k_init_s == 0) {
                            output_s += " (" + last_name[i];
                            k_init_s = 1;
                        } else
                            output_s += ", " + last_name[i];
                    }
                }
                if (k_init_s == 1)
                    output_s += ")";
                return output_n + " " + output_s;
            }
        }
    private:
        map<int, string> first_names;
        map<int, string> last_names;
};


int main()
{
	Person person;
//	person.ChangeFirstName(1965, "Polina");
//	    person.ChangeLastName(1967, "Sergeeva");
//	    for (int year : {1900, 1965, 1990}) {
//	        cout << person.GetFullNameWithHistory(year) << endl;
//	    }
//
//	    person.ChangeFirstName(1970, "Appolinaria");
//	    for (int year : {1969, 1970}) {
//	        cout << person.GetFullNameWithHistory(year) << endl;
//	    }
//
//	    person.ChangeLastName(1968, "Volkova");
//	    for (int year : {1969, 1970}) {
//	        cout << person.GetFullNameWithHistory(year) << endl;
//	    }
//
//	    person.ChangeFirstName(1990, "Polina");
//	    person.ChangeLastName(1990, "Volkova-Sergeeva");
//	    cout << person.GetFullNameWithHistory(1990) << endl;
//
//	    person.ChangeFirstName(1966, "Polina");
//	    cout << person.GetFullNameWithHistory(1966) << endl;
//
//	    person.ChangeLastName(1960, "Sergeeva");
//	    for (int year : {1960, 1967}) {
//	        cout << person.GetFullNameWithHistory(year) << endl;
//	    }
//
//	    person.ChangeLastName(1961, "Ivanova");
//	    cout << person.GetFullNameWithHistory(1967) << endl;
//
//	    person.ChangeLastName(1989, "Volkova-Sergeeva");
//	    cout << person.GetFullNameWithHistory(1995) << endl;
	person.ChangeLastName(1910, "Ivanov");
	person.ChangeLastName(1910, "Sokolov");
	cout << person.GetFullNameWithHistory(1940) << endl;
	cout << person.GetFullName(1940) << endl;
	return 0;
}
