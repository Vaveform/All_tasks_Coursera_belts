#include <iostream>
#include <cmath>
using namespace std;

int gcd(int a, int b)
{
	int result = b;
	if(a < b)
	{
		swap(a, b);
	}
	while(a % b != 0)
	{
		int tmp = b;
		b = a % b;
		a = tmp;
	}
	swap(result, b);
	return result;
}

class Rational {
public:
	void Update(int new_numerator, int new_denominator)
	{
		if(new_numerator == 0)
		{
			numerator = 0;
			denominator = 1;
		}
		else if((new_numerator > 0 && new_denominator < 0) || (new_numerator < 0 && new_denominator < 0))
		{
			numerator = ((-1) * new_numerator) / gcd(abs(new_numerator), abs(new_denominator));
			denominator = ((-1) * new_denominator) / gcd(abs(new_numerator), abs(new_denominator));
		}
		else{
			numerator = new_numerator / gcd(abs(new_numerator), abs(new_denominator));
			denominator = new_denominator / gcd(abs(new_numerator), abs(new_denominator));
		}
	}
    Rational()
    {
    	numerator = 0;
    	denominator = 1;
    }
    Rational(int new_numerator, int new_denominator)
    {
    	Update(new_numerator, new_denominator);
    }

    int Numerator() const {
    	return numerator;
    }

    int Denominator() const {
    	return denominator;
    }
    friend bool operator==(const Rational& lhd, const Rational& rhd);
    friend Rational operator+(const Rational& lhd, const Rational& rhd);
    friend Rational operator-(const Rational& lhd, const Rational& rhd);
    friend Rational operator*(const Rational& lhd, const Rational& rhd);
    friend Rational operator/(const Rational& lhd, const Rational& rhd);

private:
    int numerator;
    int denominator;
};

bool operator==(const Rational& lhd, const Rational& rhd)
{
	if(lhd.numerator * rhd.denominator == rhd.numerator * lhd.denominator)
	{
		return true;
	}
	else{
		return false;
	}
}
Rational operator+(const Rational& lhd, const Rational& rhd)
{
	return Rational(lhd.numerator * rhd.denominator + rhd.numerator * lhd.denominator, lhd.denominator*rhd.denominator);
}
Rational operator-(const Rational& lhd, const Rational& rhd)
{
	return Rational(lhd.numerator * rhd.denominator - rhd.numerator * lhd.denominator, lhd.denominator*rhd.denominator);
}
Rational operator*(const Rational& lhd, const Rational& rhd)
{
	return Rational(lhd.numerator * rhd.numerator, lhd.denominator * rhd.denominator);
}
Rational operator/(const Rational& lhd, const Rational& rhd)
{
	return Rational(lhd.numerator * rhd.denominator, lhd.denominator * rhd.numerator);
}

int main() {
	{
	        Rational a(2, 3);
	        Rational b(4, 3);
	        Rational c = a * b;
	        bool equal = c == Rational(8, 9);
	        if (!equal) {
	            cout << "2/3 * 4/3 != 8/9" << endl;
	            return 1;
	        }
	    }

	    {
	        Rational a(5, 4);
	        Rational b(15, 8);
	        Rational c = a / b;
	        bool equal = c == Rational(2, 3);
	        if (!equal) {
	            cout << "5/4 / 15/8 != 2/3" << endl;
	            return 2;
	        }
	    }

	    cout << "OK" << endl;
	    return 0;
}
