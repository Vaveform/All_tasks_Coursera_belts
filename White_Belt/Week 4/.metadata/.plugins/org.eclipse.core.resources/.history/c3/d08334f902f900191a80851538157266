#include <iostream>
#include <cmath>
using namespace std;

int gcd(int a, int b)
{
	int result = b;
	if(a < b)
	{
		swap(a, b);
	}
	while(a % b != 0)
	{
		int tmp = b;
		b = a % b;
		a = tmp;
	}
	swap(result, b);
	return result;
}

class Rational {
public:
    Rational()
    {
    	numerator = 0;
    	denominator = 1;
    }
    Rational(int new_numerator, int new_denominator)
    {
    	Update(new_numerator, new_denominator);
    }

    int Numerator() const {
    	return numerator;
    }

    int Denominator() const {
    	return denominator;
    }
    friend bool operator==(const Rational& lhd, const Rational& rhd);
    friend Rational operator+(const Rational& lhd, const Rational& rhd);
    friend Rational operator-(const Rational& lhd, const Rational& rhd);
    friend Rational operator*(const Rational& lhd, const Rational& rhd);
    friend Rational operator/(const Rational& lhd, const Rational& rhd);
    friend istream& operator>>(istream& stream, Rational& R);
    friend ostream& operator<<(ostream& stream, const Rational& R);

private:
    int numerator;
    int denominator;
    void Update(int new_numerator, int new_denominator)
	{
		if(new_numerator == 0)
		{
			numerator = 0;
			denominator = 1;
		}
		else if((new_numerator > 0 && new_denominator < 0) || (new_numerator < 0 && new_denominator < 0))
		{
			numerator = ((-1) * new_numerator) / gcd(abs(new_numerator), abs(new_denominator));
			denominator = ((-1) * new_denominator) / gcd(abs(new_numerator), abs(new_denominator));
		}
		else{
			numerator = new_numerator / gcd(abs(new_numerator), abs(new_denominator));
			denominator = new_denominator / gcd(abs(new_numerator), abs(new_denominator));
		}
	}
};

bool operator==(const Rational& lhd, const Rational& rhd)
{
	if(lhd.numerator * rhd.denominator == rhd.numerator * lhd.denominator)
	{
		return true;
	}
	else{
		return false;
	}
}
Rational operator+(const Rational& lhd, const Rational& rhd)
{
	return Rational(lhd.numerator * rhd.denominator + rhd.numerator * lhd.denominator, lhd.denominator*rhd.denominator);
}
Rational operator-(const Rational& lhd, const Rational& rhd)
{
	return Rational(lhd.numerator * rhd.denominator - rhd.numerator * lhd.denominator, lhd.denominator*rhd.denominator);
}
Rational operator*(const Rational& lhd, const Rational& rhd)
{
	return Rational(lhd.numerator * rhd.numerator, lhd.denominator * rhd.denominator);
}
Rational operator/(const Rational& lhd, const Rational& rhd)
{
	return Rational(lhd.numerator * rhd.denominator, lhd.denominator * rhd.numerator);
}
istream& operator>>(istream& stream, Rational& R)
{
	int p, q;
	stream >> p;
	stream.ignore(1);
	stream >> q;
	R.Update(p,q);
	return stream;
}
ostream& operator<<(ostream& stream, const Rational& R)
{
	stream << R.numerator << "\\" << R.denominator;
	return stream;
}

int main() {
	 {
	        ostringstream output;
	        output << Rational(-6, 8);
	        if (output.str() != "-3/4") {
	            cout << "Rational(-6, 8) should be written as \"-3/4\"" << endl;
	            return 1;
	        }
	    }

	    {
	        istringstream input("5/7");
	        Rational r;
	        input >> r;
	        bool equal = r == Rational(5, 7);
	        if (!equal) {
	            cout << "5/7 is incorrectly read as " << r << endl;
	            return 2;
	        }
	    }

	    {
	        istringstream input("5/7 10/8");
	        Rational r1, r2;
	        input >> r1 >> r2;
	        bool correct = r1 == Rational(5, 7) && r2 == Rational(5, 4);
	        if (!correct) {
	            cout << "Multiple values are read incorrectly: " << r1 << " " << r2 << endl;
	            return 3;
	        }

	        input >> r1;
	        input >> r2;
	        correct = r1 == Rational(5, 7) && r2 == Rational(5, 4);
	        if (!correct) {
	            cout << "Read from empty stream shouldn't change arguments: " << r1 << " " << r2 << endl;
	            return 4;
	        }
	    }

	    cout << "OK" << endl;
	    return 0;
}
