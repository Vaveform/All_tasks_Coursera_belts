#include <iostream>
#include <cmath>
using namespace std;

int gcd(int a, int b)
{
	int result = b;
	if(a < b)
	{
		swap(a, b);
	}
	while(a % b != 0)
	{
		int tmp = b;
		b = a % b;
		a = tmp;
	}
	swap(result, b);
	return result;
}

class Rational {
public:
    Rational()
    {
    	numerator = 0;
    	denominator = 1;
    }
    Rational(int new_numerator, int new_denominator)
    {
    	if(new_numerator == 0)
    	{
    		numerator = 0;
    		denominator = 1;
    	}
    	else if((new_numerator > 0 && new_denominator < 0) || (new_numerator < 0 && new_denominator < 0))
    	{
    		numerator = ((-1) * new_numerator) / gcd(abs(new_numerator), abs(new_denominator));
    		denominator = ((-1) * new_denominator) / gcd(abs(new_numerator), abs(new_denominator));
    	}
    	else{
    		numerator = new_numerator / gcd(abs(new_numerator), abs(new_denominator));
    		denominator = new_denominator / gcd(abs(new_numerator), abs(new_denominator));
    	}
    }

    int Numerator() const {
    	return numerator;
    }

    int Denominator() const {
    	return denominator;
    }
    bool operator==(Rational& lhd, Rational& rhd)
    {
    	if(lhd.numerator * rhd.denominator == rhd.numerator * lhd.denominator)
    	{
    		return true;
    	}
    	else{
    		return false;
    	}
    }
    Rational operator+(Rational& lhd, Rational& rhd)
    {
    	return Rational(lhd.numerator * rhd.denominator + rhd.numerator * lhd.denominator, lhd.denominator*rhd.denominator);
    }
    Rational operator-(Rational& lhd, Rational& rhd)
    {
    	return Rational(lhd.numerator * rhd.denominator - rhd.numerator * lhd.denominator, lhd.denominator*rhd.denominator);
    }

private:
    int numerator;
    int denominator;
};

int main() {
	{
	        Rational r1(4, 6);
	        Rational r2(2, 3);
	        bool equal = r1 == r2;
	        if (!equal) {
	            cout << "4/6 != 2/3" << endl;
	            return 1;
	        }
	    }

	    {
	        Rational a(2, 3);
	        Rational b(4, 3);
	        Rational c = a + b;
	        bool equal = c == Rational(2, 1);
	        if (!equal) {
	            cout << "2/3 + 4/3 != 2" << endl;
	            return 2;
	        }
	    }

	    {
	        Rational a(5, 7);
	        Rational b(2, 9);
	        Rational c = a - b;
	        bool equal = c == Rational(31, 63);
	        if (!equal) {
	            cout << "5/7 - 2/9 != 31/63" << endl;
	            return 3;
	        }
	    }

	    cout << "OK" << endl;
	    return 0;
}
