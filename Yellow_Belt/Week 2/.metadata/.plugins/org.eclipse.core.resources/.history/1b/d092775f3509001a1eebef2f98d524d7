#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <stdexcept>
#include <string>
#include <vector>

using namespace std;

template <class T>
ostream& operator << (ostream& os, const vector<T>& s) {
  os << "{";
  bool first = true;
  for (const auto& x : s) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << x;
  }
  return os << "}";
}

template <class T>
ostream& operator << (ostream& os, const set<T>& s) {
  os << "{";
  bool first = true;
  for (const auto& x : s) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << x;
  }
  return os << "}";
}

template <class K, class V>
ostream& operator << (ostream& os, const map<K, V>& m) {
  os << "{";
  bool first = true;
  for (const auto& kv : m) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << kv.first << ": " << kv.second;
  }
  return os << "}";
}

template<class T, class U>
void AssertEqual(const T& t, const U& u, const string& hint = {}) {
  if (t != u) {
    ostringstream os;
    os << "Assertion failed: " << t << " != " << u;
    if (!hint.empty()) {
      os << " hint: " << hint;
    }
    throw runtime_error(os.str());
  }
}

void Assert(bool b, const string& hint) {
  AssertEqual(b, true, hint);
}

class TestRunner {
public:
  template <class TestFunc>
  void RunTest(TestFunc func, const string& test_name) {
    try {
      func();
      cerr << test_name << " OK" << endl;
    } catch (exception& e) {
      ++fail_count;
      cerr << test_name << " fail: " << e.what() << endl;
    } catch (...) {
      ++fail_count;
      cerr << "Unknown exception caught" << endl;
    }
  }

  ~TestRunner() {
    if (fail_count > 0) {
      cerr << fail_count << " unit tests failed. Terminate" << endl;
      exit(1);
    }
  }

private:
  int fail_count = 0;
};

void TestPredifed(){
	Person person1;
	person1.ChangeFirstName(1981, "Elena");
	person1.ChangeLastName(1984, "Vasileva");
	AssertEqual(person1.GetFullName(1980), "Incognito");
	AssertEqual(person1.GetFullName(1982), "Elena with unknown last name");
	AssertEqual(person1.GetFullName(1986), "Elena Vasileva");
	Person person2;
	person2.ChangeFirstName(1981, "Vasileva");
	person2.ChangeLastName(1984, "Elena");
	AssertEqual(person2.GetFullName(1980), "Incognito");
	AssertEqual(person2.GetFullName(1982), "Vasileva with unknown first name");
	AssertEqual(person2.GetFullName(1986), "Elena Vasileva");
	Person person3;
	person3.ChangeFirstName(1981, "Vasileva");
	person3.ChangeLastName(1981, "Elena");
	AssertEqual(person2.GetFullName(1980), "Incognito");
	AssertEqual(person2.GetFullName(1981), "Elena Vasileva");
	AssertEqual(person2.GetFullName(1986), "Elena Vasileva");
}

void TestPredifedNotDefine(){
	Person person;
	person.ChangeFirstName(1981, "Alena");
	person.ChangeLastName(1983, "Alexeeva");
	AssertEqual(person.GetFullName(1979), "Incognito");
	AssertEqual(person.GetFullName(1982), "Alena with unknown last name");
	AssertEqual(person.GetFullName(1983), "Alena Alexeeva");
	person.ChangeFirstName(1991, "Natasha");
	person.ChangeLastName(1991, "Evgeeva");
	AssertEqual(person.GetFullName(1992), "Natasha Evgeeva");
	person.ChangeLastName(2001, "Eleseeva");
	AssertEqual(person.GetFullName(2000), "Natasha Evgeeva");
	AssertEqual(person.GetFullName(2002), "Natasha Eleseeva");
	person.ChangeFirstName(2005, "Elena");
	AssertEqual(person.GetFullName(2004), "Natasha Eleseeva");
	AssertEqual(person.GetFullName(2006), "Elena Eleseeva");
	person.ChangeLastName(1972, "Ceeva");
	AssertEqual(person.GetFullName(1971), "Incognito");
	AssertEqual(person.GetFullName(1973), "Ceeva with unknown first name");
	AssertEqual(person.GetFullName(1982), "Alena Ceeva");
	person.ChangeFirstName(1969, "Lesha");
	AssertEqual(person.GetFullName(1968), "Incognito");
	AssertEqual(person.GetFullName(1970), "Lesha with unknown last name");
	AssertEqual(person.GetFullName(1972), "Lesha Ceeva");
}


int main() {
  TestRunner runner;
  // добавьте сюда свои тесты
  return 0;
}
