#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <stdexcept>
#include <string>
#include <vector>

using namespace std;

template <class T>
ostream& operator << (ostream& os, const vector<T>& s) {
  os << "{";
  bool first = true;
  for (const auto& x : s) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << x;
  }
  return os << "}";
}

template <class T>
ostream& operator << (ostream& os, const set<T>& s) {
  os << "{";
  bool first = true;
  for (const auto& x : s) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << x;
  }
  return os << "}";
}

template <class K, class V>
ostream& operator << (ostream& os, const map<K, V>& m) {
  os << "{";
  bool first = true;
  for (const auto& kv : m) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << kv.first << ": " << kv.second;
  }
  return os << "}";
}

template<class T, class U>
void AssertEqual(const T& t, const U& u, const string& hint = {}) {
  if (t != u) {
    ostringstream os;
    os << "Assertion failed: " << t << " != " << u;
    if (!hint.empty()) {
       os << " hint: " << hint;
    }
    throw runtime_error(os.str());
  }
}

void Assert(bool b, const string& hint) {
  AssertEqual(b, true, hint);
}

class TestRunner {
public:
  template <class TestFunc>
  void RunTest(TestFunc func, const string& test_name) {
    try {
      func();
      cerr << test_name << " OK" << endl;
    } catch (exception& e) {
      ++fail_count;
      cerr << test_name << " fail: " << e.what() << endl;
    } catch (...) {
      ++fail_count;
      cerr << "Unknown exception caught" << endl;
    }
  }

  ~TestRunner() {
    if (fail_count > 0) {
      cerr << fail_count << " unit tests failed. Terminate" << endl;
      exit(1);
    }
  }

private:
  int fail_count = 0;
};

bool IsPalindrom(const string& str) {
    for(size_t i = 0; i < str.size() / 2; i++){
    	 if(str[i]!=str[str.size()-1-i]){
    		 return false;
    	 }
    }
    return true;
};

void TestIsPalindrom(){
	AssertEqual(IsPalindrom(""), true, "1");
	AssertEqual(IsPalindrom("a"), true, "2");
	AssertEqual(IsPalindrom(" "), true, "3");
	AssertEqual(IsPalindrom(" a b a"), false, "4");
	AssertEqual(IsPalindrom(" a b a "), true, "5");
	AssertEqual(IsPalindrom("abcba"), true, "6");
	AssertEqual(IsPalindrom("bcba"), false, "7");
	AssertEqual(IsPalindrom("abcb"), false, "8");
	AssertEqual(IsPalindrom("lbcb"), false, "9");
	AssertEqual(IsPalindrom("bcbl"), false, "10");
	AssertEqual(IsPalindrom(" $#@][{},./?/.,}{[]@#$ "), true, "11");
	AssertEqual(IsPalindrom("laxaaxal"), true, "12");
	AssertEqual(IsPalindrom("madam"), true, "13");
	AssertEqual(IsPalindrom("level"), true, "14");
	AssertEqual(IsPalindrom("wasitacaroracatisaw"), true, "15");
	AssertEqual(IsPalindrom("&"), true, "16");
	AssertEqual(IsPalindrom("["), true, "17");
	AssertEqual(IsPalindrom("#"), true, "18");
	AssertEqual(IsPalindrom("Madam"), false, "19");
	AssertEqual(IsPalindrom("laxssxaL"), false, "20");
	AssertEqual(IsPalindrom("laxssxal "), false, "21");
	AssertEqual(IsPalindrom(" laxssxal"), false, "22");
	AssertEqual(IsPalindrom(" laaxal"), false, "23");
	AssertEqual(IsPalindrom(" laxaal"), false, "24");
	AssertEqual(IsPalindrom("madaM"), false, "25");
	AssertEqual(IsPalindrom("Walk, sleep and sleep, Walk"), false, "26");
	AssertEqual(IsPalindrom("!Walk, sleep and dna peels ,klaW!"), true, "27");
	AssertEqual(IsPalindrom("WAKAW"), true, "28");
	AssertEqual(IsPalindrom("WAAW"), true, "29");
	AssertEqual(IsPalindrom("wAkAw"), true, "30");
	AssertEqual(IsPalindrom("wA k Aw"), true, "31");
}

int main() {
  TestRunner runner;
  runner.RunTest(TestIsPalindrom, "MyTest");
  return 0;
}
