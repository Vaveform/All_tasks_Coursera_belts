#include <string>
#include <iostream>
#include <cassert>
#include <vector>
#include <map>

using namespace std;

enum class QueryType {
  NewBus,
  BusesForStop,
  StopsForBus,
  AllBuses
};

struct Query {
  QueryType type;
  string bus;
  string stop;
  vector<string> stops;
};

istream& operator >> (istream& is, Query& q)
{
	string QueryTypeString;
	is >> QueryTypeString;
	if(QueryTypeString == "NEW_BUS"){
		q.type = QueryType::NewBus;
		is >> q.bus;
		int num_of_stops;
		is >> num_of_stops;
		q.stops.resize(num_of_stops);
		for(auto& stop:q.stops){
			is >> stop;
		}
	}
	else if(QueryTypeString == "BUSES_FOR_STOP"){
		q.type = QueryType::BusesForStop;
		is >> q.stop;
	}
	else if(QueryTypeString == "STOPS_FOR_BUS"){
		q.type = QueryType::StopsForBus;
		is >> q.bus;
	}
	else if(QueryTypeString == "ALL_BUSES"){
		q.type = QueryType::AllBuses;
	}
	return is;
}

struct BusesForStopResponse
{
	vector<string> buses;
};

ostream& operator << (ostream& os, const BusesForStopResponse& r) {
	if(r.buses.size() == 0){
		cout << "No stop" << endl;
	}
	else{
		for(const auto& bus: r.buses){
			cout << bus << " ";
		}
		cout << endl;
	}
	return os;
}

struct StopsForBusResponse
{
	map<string, vector<string>> buses_to_stops;
	string bus;
	vector<string> stops;
};

ostream& operator << (ostream& os, const StopsForBusResponse& r) {
	if(r.bus.size() == 0){
		cout << "No bus" << endl;
	}
	else{
		for(const string& stop: r.stops){
			cout << "Stop " << stop << ": ";
			if(r.buses_to_stops.at(stop).size() == 1){
				cout << "no interchange";
			}
			else{
				for(const string& other_bus: r.buses_to_stops.at(stop)){
					if(r.bus != other_bus){
						cout << other_bus << " ";
					}
				}
			}
			cout << endl;
		}
	}
	return os;
}

struct AllBusesResponse {
	map<string, vector<string>> stops_to_buses;
};

ostream& operator << (ostream& os, const AllBusesResponse& r) {
  return os;
}

class BusManager {
private:
	map<string, vector<string>> buses_to_stops;
	map<string, vector<string>> stops_to_buses;
public:
  void AddBus(const string& bus, const vector<string>& stops)
  {
	  stops_to_buses[bus] = stops;
	  for (string& stop : stops)
	  {
		  buses_to_stops.at(stop).push_back(bus);
	  }
  }

  BusesForStopResponse GetBusesForStop(const string& stop) const {
	  BusesForStopResponse result;
	  if(buses_to_stops.count(stop) != 0){
		  result.buses = buses_to_stops.at(stop);
	  }
	  return result;
  }

  StopsForBusResponse GetStopsForBus(const string& bus) const {
	  StopsForBusResponse result;
	  if(stops_to_buses.count(bus) != 0){
		  result.bus = bus;
		  for(const string& stop : stops_to_buses.at(bus)){
			  result.stops.push_back(stop);
			  result.buses_to_stops[stop] = buses_to_stops.at(stop);
		  }
	  }
	  return result;
  }

  AllBusesResponse GetAllBuses() const {
	  AllBusesResponse result;
	  result.stops_to_buses = stops_to_buses;
	  return result;
  }
};

int main() {
  int query_count;
  Query q;

  cin >> query_count;

  BusManager bm;
  for (int i = 0; i < query_count; ++i) {
    cin >> q;
    switch (q.type) {
    case QueryType::NewBus:
      bm.AddBus(q.bus, q.stops);
      break;
    case QueryType::BusesForStop:
      cout << bm.GetBusesForStop(q.stop) << endl;
      break;
    case QueryType::StopsForBus:
      cout << bm.GetStopsForBus(q.bus) << endl;
      break;
    case QueryType::AllBuses:
      cout << bm.GetAllBuses() << endl;
      break;
    }
  }

  return 0;
}
