#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <stdexcept>
#include <string>
#include <vector>
#include <cmath>

using namespace std;

template <class T>
ostream& operator << (ostream& os, const vector<T>& s) {
  os << "{";
  bool first = true;
  for (const auto& x : s) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << x;
  }
  return os << "}";
}

template <class T>
ostream& operator << (ostream& os, const set<T>& s) {
  os << "{";
  bool first = true;
  for (const auto& x : s) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << x;
  }
  return os << "}";
}

template <class K, class V>
ostream& operator << (ostream& os, const map<K, V>& m) {
  os << "{";
  bool first = true;
  for (const auto& kv : m) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << kv.first << ": " << kv.second;
  }
  return os << "}";
}

template<class T, class U>
void AssertEqual(const T& t, const U& u, const string& hint = {}) {
  if (t != u) {
    ostringstream os;
    os << "Assertion failed: " << t << " != " << u;
    if (!hint.empty()) {
       os << " hint: " << hint;
    }
    throw runtime_error(os.str());
  }
}

void Assert(bool b, const string& hint) {
  AssertEqual(b, true, hint);
}

class TestRunner {
public:
  template <class TestFunc>
  void RunTest(TestFunc func, const string& test_name) {
    try {
      func();
      cerr << test_name << " OK" << endl;
    } catch (exception& e) {
      ++fail_count;
      cerr << test_name << " fail: " << e.what() << endl;
    } catch (...) {
      ++fail_count;
      cerr << "Unknown exception caught" << endl;
    }
  }

  ~TestRunner() {
    if (fail_count > 0) {
      cerr << fail_count << " unit tests failed. Terminate" << endl;
      exit(1);
    }
  }

private:
  int fail_count = 0;
};


int GetDistinctRealRootCount(double a, double b, double c)
{
	int result;
	if(a == 0){
		if(b != 0){
			result = 1;
		}
		else{
			result = 0;
		}
	}
	else{
		if(sqrt(b*b - 4*a*c) < 0){
			result = 0;
		}
		else if(sqrt(b*b - 4*a*c) == 0){
			result = 1;
		}
		else{
			result = 2;
		}
	}
	return result;
}

void TestLinearEquation(){
	AssertEqual(GetDistinctRealRootCount(0, 10, 5), 1, "a = 0, b = 10, c = 5");
	AssertEqual(GetDistinctRealRootCount(0, -2, 10), 1, "a = 0, b = -2, c = 10");
	AssertEqual(GetDistinctRealRootCount(0, 20, -4), 1, "a = 0, b = 20, c = -4");
	AssertEqual(GetDistinctRealRootCount(0, -2, -4), 1, "a = 0, b = -2, c = -4");
	AssertEqual(GetDistinctRealRootCount(0, 0, 205), 0, "a = 0, b = 0, c = 205");
	AssertEqual(GetDistinctRealRootCount(0, 1232, 0), 1, "a = 0, b = 1232, c = 0");
}

void TestQuadraticEquation(){
	AssertEqual(GetDistinctRealRootCount(5, 2, 25), 0, "a = 5, b = 2, c = 25");
	AssertEqual(GetDistinctRealRootCount(5, 22, 25), 2, "a = 5, b = 22, c = 25");
	AssertEqual(GetDistinctRealRootCount(-5, -22, -25), 2, "a = -5, b = -22, c = -25");
	AssertEqual(GetDistinctRealRootCount(5, -32, -25), 2, "a = 5, b = -32, c = -25");
	AssertEqual(GetDistinctRealRootCount(-5, 32, -25), 2, "a = -5, b = 32, c = -25");
	AssertEqual(GetDistinctRealRootCount(5, 0, 25), 0, "a = 5, b = 0, c = 25");
	AssertEqual(GetDistinctRealRootCount(-5, 0, -25), 0, "a = -5, b = 0, c = -25");
	AssertEqual(GetDistinctRealRootCount(-5, 0, 25), 2, "a = -5, b = 0, c = 25");
	AssertEqual(GetDistinctRealRootCount(5, 0, -25),2, "a = 5, b = 0, c = -25");
	AssertEqual(GetDistinctRealRootCount(2, 4, 2), 1, "a = 2, b = 4, c = 2");
	AssertEqual(GetDistinctRealRootCount(2, -4, 2), 1, "a = 2, b = -4, c = 2");
	AssertEqual(GetDistinctRealRootCount(-2, -4, 0), 2, "a = -2, b = -4, c = 0");
	AssertEqual(GetDistinctRealRootCount(-2, 4, 0), 2, "a = -2, b = 4, c = 0");
	AssertEqual(GetDistinctRealRootCount(-2, 0, 0), 1, "a = -2, b = 0, c = 0");
	AssertEqual(GetDistinctRealRootCount(2, 0, 0), 1, "a = 2, b = 0, c = 0");
	AssertEqual(GetDistinctRealRootCount(-2, -10, 0), 2, "a = -2, b = -10, c = 0");
	AssertEqual(GetDistinctRealRootCount(2, 10, 0), 2, "a = 2, b = 10, c = 0");
	AssertEqual(GetDistinctRealRootCount(2, -10, 0), 2, "a = 2, b = -10, c = 0");
	AssertEqual(GetDistinctRealRootCount(-2, 10, 0), 2, "a = -2, b = 10, c = 0");
	AssertEqual(GetDistinctRealRootCount(-10, -2, 0), 2, "a = -2, b = -10, c = 0");
	AssertEqual(GetDistinctRealRootCount(10, 2, 0), 0, "a = 2, b = 10, c = 0");
	AssertEqual(GetDistinctRealRootCount(-10, 2, 0), 2, "a = 2, b = -10, c = 0");
	AssertEqual(GetDistinctRealRootCount(10, -2, 0), 0, "a = -2, b = 10, c = 0");
}

int main() {
	cout << GetDistinctRealRootCount(5, 2, 25) << endl;
  TestRunner runner;
  runner.RunTest(TestLinearEquation, "TestLinearEquation");
  runner.RunTest(TestQuadraticEquation, "TestQuadraticEquation");
  return 0;
}
