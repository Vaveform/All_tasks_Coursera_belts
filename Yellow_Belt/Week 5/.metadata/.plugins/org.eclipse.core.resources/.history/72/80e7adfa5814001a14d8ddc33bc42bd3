#include <iostream>
#include <string>
#include <vector>

using namespace std;

//class Human{
//public:
//	Human(const string& _Name) : Name(_Name) {}
//	virtual void Walk(const string& destination) const = 0;
//	const string Name;
//};
//
//class Student : public Human {
//public:
//    Student(const string& _Name, const string& favouriteSong) :
//    	Human(_Name), FavouriteSong(favouriteSong) {}
//    void Learn() const {
//        cout << "Student: " << Name << " learns" << endl;
//    }
//    void Walk(const string& destination) const override {
//        cout << "Student: " << Name << " walks to: " << destination << endl;
//        cout << "Student: " << Name << " sings a song: " << FavouriteSong << endl;
//    }
//    void SingSong() const {
//        cout << "Student: " << Name << " sings a song: " << FavouriteSong << endl;
//    }
//    const string FavouriteSong;
//};
//
//class Teacher : public Human {
//public:
//    Teacher(const string& name, const string& subject) : Human(name), Subject(subject) {}
//    void Teach() const {
//        cout << "Teacher: " << Name << " teaches: " << Subject << endl;
//    }
//    void Walk(const string& destination) const override {
//        cout << "Teacher: " << Name << " walks to: " << destination << endl;
//    }
//    const string Subject;
//};
//
//
//class Policeman : public Human {
//public:
//    Policeman(const string& name) : Human(name) {}
//    void Check(Teacher t) {
//        cout << "Policeman: " << Name << " checks Teacher. Teacher's name is: " << t.Name << endl;
//    }
//
//    void Check(Student s) {
//        cout << "Policeman: " << Name << " checks Student. Student's name is: " << s.Name << endl;
//    }
//
//    void Check(Policeman p) {
//        cout << "Policeman: " << Name << " checks Policeman. Policeman's name is: " << p.Name << endl;
//    }
//
//    template <typename Obj>
//    void Check(Obj M){
//    	cout << "Policeman: " << Name << " checks " << Obj M::
//    }
//
//    void Walk(const string& destination) const override {
//        cout << "Policeman: " << Name << " walks to: " << destination << endl;
//    }
//};
//
//
//void VisitPlaces(Teacher t, vector<string> places) {
//    for (auto p : places) {
//        t.Walk(p);
//    }
//}
//
//void VisitPlaces(Student s, vector<string> places) {
//    for (auto p : places) {
//        s.Walk(p);
//    }
//}
//
//void VisitPlaces(Policeman pol, vector<string> places) {
//    for (auto p : places) {
//        pol.Walk(p);
//    }
//}

template <typename O>
void rrr(O& k){
	vector<typename O::value_type> k(5);
};


int main() {
//    Teacher t("Jim", "Math");
//    Student s("Ann", "We will rock you");
//    Policeman p("Bob");
//
//    VisitPlaces(t, {"Moscow", "London"});
//    p.Check(s);
//    VisitPlaces(s, {"Moscow", "London"});
	string l;
	rrr(l);
    return 0;
}
