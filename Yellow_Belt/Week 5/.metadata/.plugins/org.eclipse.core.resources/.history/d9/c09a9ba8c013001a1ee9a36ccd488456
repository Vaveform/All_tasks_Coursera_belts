#include <iostream>
#include <vector>
#include <memory>
#include <string>
#include <math.h>

using namespace std;

class Figure{
public:
	virtual string Name() const = 0;
	virtual double Perimeter() const = 0;
	virtual double Area() const = 0;
};

class Rect : public Figure{
public:
	Rect(const string& _name, const double& _width, const double& _height) :
		name(_name), width(_width), height(_height) {}
	string Name() const override{
		return name;
	}
	double Perimeter() const override{
		return 2.0 * (width + height);
	}
	double Area() const override{
		return width * height;
	}
	const string name;
	const double width;
	const double height;
};

//class Triangle : public Figure{
//public:
//	Triangle(const string& name1, const double& first,const double& second, const double& third) :
//		name(name1), a(first), b(second), c(third) {}
//	string Name() const override{
//		return name;
//	}
//	double Perimeter() const override{
//		return a + b + c;
//	}
//	double Area() const override{
//		double p = 0.5 * Perimeter();
//		return sqrt(p*(p-a)*(p-b)*(p-c));
//	}
//	const string name;
//	const double a;
//	const double b;
//	const double c;
//};
//
//class Circle : public Figure{
//public:
//	Circle(const string& name2, const double& radius) : name(name2), r(radius) {}
//	string Name() const override{
//		return name;
//	}
//	double Perimeter() const override{
//		return 2 * 3.14 * r;
//	}
//	double Area() const override{
//		return 3.14 * r * r;
//	}
//	const string name;
//	const double r;
//};

int main() {
//  vector<shared_ptr<Figure>> figures;
//  for (string line; getline(cin, line); ) {
//    istringstream is(line);
//
//    string command;
//    is >> command;
//    if (command == "ADD") {
//      figures.push_back(CreateFigure(is));
//    } else if (command == "PRINT") {
//      for (const auto& current_figure : figures) {
//        cout << fixed << setprecision(3)
//             << current_figure->Name() << " "
//             << current_figure->Perimeter() << " "
//             << current_figure->Area() << endl;
//      }
//    }
//  }
  return 0;
}
