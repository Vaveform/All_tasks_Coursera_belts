#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <deque>

using namespace std;

void first_expression_type()
{
	int initial;
	cin >> initial;
	deque<string> expression;
	expression.push_back(("(" + to_string(initial) + ")"))
	int num_of_operation;
	cin >> num_of_operation;
//	bool is_empty = (num_of_operation == 0);
//	is_empty ? expression.push_back(to_string(initial)) :
//			expression.push_back(("(" + to_string(initial) + ")"));
	while(num_of_operation != 0)
	{
		string operation;
		cin >> operation;
		int number;
		cin >> number;
		expression.push_back((" " + operation + " "));
		expression.push_back(to_string(number));
		num_of_operation--;
		if(num_of_operation != 1){
			expression.push_back(")");
			expression.push_front("(");
		}
	}
	for(auto const& elem: expression){
		cout << elem;
	}
	cout << endl;
}

void second_expression_type()
{
	int initial;
	cin >> initial;
	deque<string> expression;
	expression.push_back(to_string(initial));
	int num_of_operation;
	cin >> num_of_operation;
	while(num_of_operation != 0)
	{
		string operation;
		cin >> operation;
		int number;
		cin >> number;
		expression.push_back((" " + operation + " "));
		expression.push_back(to_string(number));
		if(num_of_operation != 1){
			expression.push_back(")");
			expression.push_front("(");
		}
		num_of_operation--;
	}
	for(auto const& elem: expression){
		cout << elem;
	}
	cout << endl;
}



int main() {
	first_expression_type();
	return 0;
}
