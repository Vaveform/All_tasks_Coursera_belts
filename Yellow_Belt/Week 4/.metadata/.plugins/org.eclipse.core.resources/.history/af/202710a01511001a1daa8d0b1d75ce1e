#include <iostream>
#include <set>
#include <algorithm>
#include <sstream>
#include <exception>
#include <string>
#include <map>

using namespace std;

template <class T>
ostream& operator << (ostream& os, const set<T>& s) {
  os << "{";
  bool first = true;
  for (const auto& x : s) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << x;
  }
  return os << "}";
}

template <class K, class V>
ostream& operator << (ostream& os, const map<K, V>& m) {
  os << "{";
  bool first = true;
  for (const auto& kv : m) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << kv.first << ": " << kv.second;
  }
  return os << "}";
}

template<class T, class U>
void AssertEqual(const T& t, const U& u,
    const string& hint)
{
  if (t != u) {
    ostringstream os;
    os << "Assertion failed: " << t << " != " << u
       << " hint: " << hint;
    throw runtime_error(os.str());
  }
}

inline void Assert(bool b, const string& hint) {
  AssertEqual(b, true, hint);
}

class TestRunner {
public:
  template <class TestFunc>
  void RunTest(TestFunc func, const string& test_name) {
    try {
	  func();
	  cerr << test_name << " OK" << endl;
	} catch (runtime_error& e) {
	  ++fail_count;
	  cerr << test_name << " fail: " << e.what() << endl;
	}
  }

  ~TestRunner() {
    if (fail_count > 0) {
      cerr << fail_count << " unit tests failed. Terminate" << endl;
      exit(1);
    }
  }

private:
  int fail_count = 0;
};



set<int>::const_iterator FindNearestElement(const set<int>& numbers,int border)
{
    if(numbers.empty())
    {
        return numbers.end();
    }
    else if(border <= *numbers.begin())
    {
        return numbers.lower_bound(border);
    }
    else if(border >= *prev(numbers.end()))
    {
        return prev(numbers.upper_bound(border));
    }
    else
    {
        auto it = numbers.lower_bound(border);
        auto it_prev = prev(it);
        auto it_next = (numbers.find(border) != numbers.end() ? next(it) : it);
        return border - *it_prev <= *it_next - border ? it_prev : it_next;
    }
}

void Test_1()
{
	{
		set<int> numbers = {1,2,4,10,15,25};
		AssertEqual(*FindNearestElement(numbers, -100), 1);
		AssertEqual(*FindNearestElement(numbers, 1), 2);
		AssertEqual(*FindNearestElement(numbers, 2), 1);
		AssertEqual(*FindNearestElement(numbers, 4), 2);
		AssertEqual(*FindNearestElement(numbers, 10), 15);
		AssertEqual(*FindNearestElement(numbers, 100), 25);
		AssertEqual(*FindNearestElement(numbers, 3), 2);
		AssertEqual(*FindNearestElement(numbers, 5), 4);
		AssertEqual(*FindNearestElement(numbers, 6), 4);
    }
	{
		set<int> numbers = {1,3,5,7,9,11};
		AssertEqual(*FindNearestElement(numbers, 2), 1);
		AssertEqual(*FindNearestElement(numbers, 4), 3);
		AssertEqual(*FindNearestElement(numbers, 6), 5);
		AssertEqual(*FindNearestElement(numbers, 8), 7);
		AssertEqual(*FindNearestElement(numbers, 10), 9);
	}
	{
		set<int> numbers = {-11, -9, -7, -5, -3, -1};
		AssertEqual(*FindNearestElement(numbers, 10), 1);
		AssertEqual(*FindNearestElement(numbers, -40), -11);
		AssertEqual(*FindNearestElement(numbers, -10), -11);
		AssertEqual(*FindNearestElement(numbers, -8), -9);
		AssertEqual(*FindNearestElement(numbers, -6), -7);
	}
}

int main()
{
	TestRunner runner;
	runner(Test_1);
//    set<int> empty_set;
//    cout << (FindNearestElement(empty_set, 8) == end(empty_set)) << endl;
//    cout << *FindNearestElement(numbers, 4) << endl;
//    cout << *FindNearestElement(numbers, 1) << endl;
//    cout << *FindNearestElement(numbers, 7) << endl;
    return 0;

}
