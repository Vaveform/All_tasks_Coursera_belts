#include "test_runner.h"
#include <string>
#include <vector>
#include <string_view>
#include <deque>
#include <algorithm>

using namespace std;

class Translator {
public:
  void Add(string_view source, string_view target){
	  auto it = find(strings.begin(), strings.end(), source);
	  string_view ref_source, ref_target;
	  if(it == strings.end()){
		  strings.emplace_back(source);
		  ref_source = strings.back();
	  }
	  else{
		  ref_source = *it;
	  }
	  it = find(strings.begin(), strings.end(), target);
	  if(it == strings.end()){
		  strings.emplace_back(target);
		  ref_target = strings.back();
	  }
	  else{
		  ref_target = *it;
	  }
	  forward[ref_source] = ref_target;
	  backward[ref_target] = ref_source;
  }
  string_view TranslateForward(string_view source) const{
	  auto translated = forward.find(source);
	  if(translated == forward.end()){
		  return string_view("");
	  }
	  else{
		  return translated->second;
	  }
  }
  string_view TranslateBackward(string_view target) const{
	  auto translated = backward.find(target);
	  if(translated == backward.end()){
		  return string_view("");
	  }
	  else{
		  return translated->second;
	  }
  }

private:
  map<string_view, string_view> forward;
  map<string_view, string_view> backward;
  deque<string> strings;
};

void TestSimple() {
  Translator translator;
  string l("stol");
  translator.Add(string("okno"), string("window"));
  translator.Add(l, string("table"));
  translator.Add(l, string("truba"));
  translator.Add(l, string("knopka"));
  l.clear();
  translator.Add(string("kopa"), string("opa"));
  translator.Add(string("lopa"), string("opa"));
  translator.Add(string("jola"), string("opa"));
  string t("kakashka");
  translator.Add(string_view(t), string_view("iop"));
  translator.Add(string_view(t), string_view("yota"));
  translator.Add(string_view(t), string_view("rota"));
  translator.Add(string_view("trully"), string_view("gonep"));
  translator.Add(string_view("kaka"), string_view("gonep"));
  translator.Add(string_view("lui"), string_view("gonep"));
  t.clear();

  ASSERT_EQUAL(translator.TranslateForward("stol"), "knopka");
  ASSERT_EQUAL(translator.TranslateBackward("knopka"), "stol");
  ASSERT_EQUAL(translator.TranslateForward("lopa"), "opa");
//  ASSERT_EQUAL(translator.TranslateBackward("opa"), "jola");
//  ASSERT_EQUAL(translator.TranslateForward("kakashka"), "rota");
//  ASSERT_EQUAL(translator.TranslateBackward("gonep"), "lui");
}

int main() {
  TestRunner tr;
  RUN_TEST(tr, TestSimple);
  return 0;
}
