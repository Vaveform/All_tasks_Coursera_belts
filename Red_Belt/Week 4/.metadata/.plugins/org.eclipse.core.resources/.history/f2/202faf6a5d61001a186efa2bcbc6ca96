#include "stats.h"
#include <iostream>

Stats::Stats(){
	Stats::methods_stat = {
			  {"GET", 0},
			  {"PUT", 0},
			  {"POST", 0},
			  {"DELETE", 0},
			  {"UNKNOWN", 0}
	};
	Stats::urls_stat =  {
			  {"/", 0},
			  {"/order", 0},
			  {"/product", 0},
			  {"/basket", 0},
			  {"/help", 0},
			  {"unknown", 0}
	};
}

void Stats::AddMethod(string_view method){
	cout << method << endl;
	if(Stats::methods_stat.find(method) == Stats::methods_stat.end()){
		Stats::methods_stat[*prev(Stats::methods_stat.end())] += 1;
	}
	else{
		Stats::methods_stat[method] += 1;
	}
}

void Stats::AddUri(string_view uri){
	cout << uri << endl;
	if(Stats::urls_stat.find(uri) == Stats::urls_stat.end()){
		Stats::urls_stat[*prev(Stats::methods_stat.end())] += 1;
	}
	else{
		Stats::urls_stat[uri] += 1;
	}
}

const map<string_view, int>& Stats::GetMethodStats() const {
	return Stats::methods_stat;
}

const map<string_view, int>& Stats::GetUriStats() const {
	return Stats::urls_stat;
}

queue<string>& Stats::GetRequestHistory(){
	return Stats::requests_history;
}

HttpRequest ParseRequest(string_view line){
	string elem(line);
	istringstream is(elem);
	string method, uri, protocol;
	is >> method >> uri >> protocol;
	HttpRequest http_fields;
	http_fields.method = method;
	http_fields.uri = uri;
	http_fields.protocol = protocol;
	return http_fields;
}
