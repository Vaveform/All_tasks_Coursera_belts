#include "test_runner.h"
#include <string>
#include <vector>
#include <string_view>
#include <deque>

using namespace std;

class Translator {
public:
  void Add(string_view source, string_view target){
	  forward[source] = target;
	  backward[target] = source;
  }
  string_view TranslateForward(string_view source) const{
	  auto translated = forward.find(source);
	  if(translated == forward.end()){
		  return string_view("");
	  }
	  else{
		  return translated->second;
	  }
  }
  string_view TranslateBackward(string_view target) const{
	  auto translated = backward.find(target);
	  if(translated == backward.end()){
		  return string_view("");
	  }
	  else{
		  return translated->second;
	  }
  }

private:
  map<string_view, string_view> forward;
  map<string_view, string_view> backward;
};

void TestSimple() {
  Translator translator;
  translator.Add(string("okno"), string("window"));
  translator.Add(string("stol"), string("table"));

  ASSERT_EQUAL(translator.TranslateForward("okno"), "window");
  ASSERT_EQUAL(translator.TranslateBackward("table"), "stol");
  ASSERT_EQUAL(translator.TranslateBackward("stol"), "");
}

int main() {
  TestRunner tr;
  RUN_TEST(tr, TestSimple);
  Translator t;
  int querry_count;
  cin >> querry_count;
  for(int query_id = 0; query_id < querry_count; ++query_id){
	  string querry_type;
	  cin >> querry_type;
	  if(querry_type == "ADD"){
		  string source, target;
		  cin >> source >> target;
		  t.Add(source, target);
	  }
	  else if(querry_type == "FORWARD"){
		  string source;
		  cin >> source;
		  t.TranslateForward(source);
	  }
	  else{
		  string target;
		  cin >> target;
		  t.TranslateBackward(target);
	  }
  }
  return 0;
}
