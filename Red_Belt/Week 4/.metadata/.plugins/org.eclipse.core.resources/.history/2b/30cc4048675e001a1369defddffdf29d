#include <string>
#include <list>
#include "test_runner.h"
using namespace std;

class Editor {
 public:
  // – –µ–∞–ª–∏–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  Editor() : data(0), buffer(0), cursor(data.begin()){
  };
  void Left(){
	  if(cursor != data.begin()){
		  cursor--;
	  }
  }
  void Right(){
	  if(cursor != data.end()){
		  cursor++;
	  }
  }
  void Insert(char token){
	  if(cursor == data.end()){
		  data.push_back(token);
	  }
	  else if(cursor == data.begin()){
		  data.push_front(token);
	  }
	  else{
		  data.insert(cursor, token);
	  }
  }
  void Cut(size_t tokens = 1){
	  buffer.clear();
	  auto end_range = GetEndRange(tokens);
	  buffer.splice(buffer.begin(), data, cursor, end_range);
	  cursor = end_range;
	  cursor--;
  }
  void Copy(size_t tokens = 1){
	  buffer.clear();
	  buffer.insert(buffer.begin(), cursor, GetEndRange(tokens));
  }
  void Paste(){
	  data.insert(cursor, buffer.begin(), buffer.end());
  }
  string GetText() const{
	  return string(data.begin(), data.end());
  }
  string GetBuffer() const{
	  return string(buffer.begin(), buffer.end());
  }
 private:
  list<char>::iterator GetEndRange(size_t tokens){
	  list<char>::iterator end_range = cursor;
	  while(end_range != data.end() && tokens != 0){
		  end_range++;
		  tokens--;
	  }
	  return end_range;
  }
  list<char> data;
  list<char> buffer;
  list<char>::iterator cursor;
};

void TypeText(Editor& editor, const string& text) {
  for(char c : text) {
    editor.Insert(c);
  }
}

void TestEditing() {
  {
    Editor editor;

    const size_t text_len = 12;
    const size_t first_part_len = 7;
    TypeText(editor, "hello, world");
    for(size_t i = 0; i < text_len; ++i) {
      editor.Left();
    }
    editor.Cut(first_part_len);
    for(size_t i = 0; i < text_len - first_part_len; ++i) {
      editor.Right();
    }
    TypeText(editor, ", ");
    editor.Paste();
    editor.Left();
    editor.Left();
    editor.Cut(3);

    ASSERT_EQUAL(editor.GetText(), "world, hello");
  }
  {
    Editor editor;

    TypeText(editor, "misprnit");
    editor.Left();
    editor.Left();
    editor.Left();
    editor.Cut(1);
    editor.Right();
    editor.Paste();

    ASSERT_EQUAL(editor.GetText(), "misprint");
  }
}

void TestReverse() {
  Editor editor;

  const string text = "esreveR";
  for(char c : text) {
    editor.Insert(c);
    editor.Left();
  }

  ASSERT_EQUAL(editor.GetText(), "Reverse");
}

void TestNoText() {
  Editor editor;
  ASSERT_EQUAL(editor.GetText(), "");

  editor.Left();
  editor.Left();
  editor.Right();
  editor.Right();
  editor.Copy(0);
  editor.Cut(0);
  editor.Paste();

  ASSERT_EQUAL(editor.GetText(), "");
}

void TestEmptyBuffer() {
  Editor editor;

  editor.Paste();
  TypeText(editor, "example");
  editor.Left();
  editor.Left();
  editor.Paste();
  editor.Right();
  editor.Paste();
  editor.Copy(0);
  editor.Paste();
  editor.Left();
  editor.Cut(0);
  editor.Paste();

  ASSERT_EQUAL(editor.GetText(), "example");
}

int main() {
  TestRunner tr;
  RUN_TEST(tr, TestEditing);
  RUN_TEST(tr, TestReverse);
  RUN_TEST(tr, TestNoText);
  RUN_TEST(tr, TestEmptyBuffer);
	Editor editor;

	const size_t text_len = 12;
	const size_t first_part_len = 7;
	TypeText(editor, "hello, world");
	for(size_t i = 0; i < text_len; ++i) {
	  editor.Left();
	}
	editor.Cut(first_part_len);
	cout << editor.GetBuffer() << endl;
	//cout << editor.GetText() << endl;
	for(size_t i = 0; i < text_len - first_part_len; ++i) {
	  editor.Right();
	}
	TypeText(editor, ", ");
	cout << editor.GetText() << endl;
	editor.Paste();
	cout << editor.GetText() << endl;
	editor.Left();
	editor.Left();
	editor.Cut(3);
	cout << editor.GetText() << endl;
    return 0;
}
