#include "stats.h"
#include <iostream>

Stats::Stats(){
	for(size_t i = 0; i < Stats::methods.size(); ++i){
		Stats::methods_stat[Stats::methods[i]] = 0;
		Stats::urls_stat[Stats::urls[i]] = 0;
	}
	Stats::urls_stat[Stats::urls[Stats::urls.size() - 1]] = 0;
}

void Stats::AddMethod(string_view method){
	cout << method << endl;
	if(Stats::methods_stat.find(method) == Stats::methods_stat.end()){
		Stats::methods_stat[Stats::methods[Stats::methods.size() - 1]] += 1;
	}
	else{
		Stats::methods_stat[method] += 1;
	}
}

void Stats::AddUri(string_view uri){
	cout << uri << endl;
	if(Stats::urls_stat.find(uri) == Stats::urls_stat.end()){
		Stats::urls_stat[Stats::urls[Stats::urls.size() - 1]] += 1;
	}
	else{
		Stats::urls_stat[uri] += 1;
	}
}

const map<string_view, int>& Stats::GetMethodStats() const {
	return Stats::methods_stat;
}

const map<string_view, int>& Stats::GetUriStats() const {
	return Stats::urls_stat;
}

HttpRequest ParseRequest(string_view line){
	string elem(line);
	istringstream is(elem);
	string method, uri, protocol;
	is >> method >> uri >> protocol;
	HttpRequest http_fields;
	http_fields.method = method;
	http_fields.uri = uri;
	http_fields.protocol = protocol;
	std::cout << http_fields.method << ":" << http_fields.uri << ":" << http_fields.protocol << std::endl;
	return http_fields;
}
