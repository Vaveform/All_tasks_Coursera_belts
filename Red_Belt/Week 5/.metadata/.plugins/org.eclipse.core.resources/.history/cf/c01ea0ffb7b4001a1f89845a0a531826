#include "test_runner.h"
#include "profile.h"

#include <map>
#include <string>
#include <string_view>
#include <future>
#include <vector>
#include <functional>

using namespace std;


template <typename It>
class IteratorRange{
private:
	It first;
	It last;
	size_t SIZE_PAGE;
public:
	IteratorRange(It f, It l, size_t s): first(f), last(l), SIZE_PAGE(s){};
	It begin() const{
		return first;
	}
	It end() const{
		return last;
	}
	size_t size() const{
		return SIZE_PAGE;
	}
};

template <typename Iterator>
class Paginator {
private:
	vector<IteratorRange<Iterator>> Values;
	size_t SIZE;
public:
	Paginator(Iterator f, Iterator l, size_t s){
		//cout << l - f << endl;
		auto start_page = f;
		auto end_page = f;
		vector<IteratorRange<Iterator>> Pages;
		while(end_page != l){
			end_page = next(start_page, min(s, size_t(l - start_page)));
			Pages.push_back(IteratorRange{start_page, end_page, size_t(end_page - start_page)});
			start_page = end_page;
		}
		Values = Pages;
		SIZE = Pages.size();
		//cout << SIZE << endl;
	};
	auto begin() const
	{
		return Values.begin();
	}
	auto end() const
	{
		return Values.end();
	}
	size_t size() const {
		return size_t(end() - begin());
	}
};

template <typename C>
auto Paginate(C& c, size_t page_size) {
  return Paginator{c.begin(), c.end(), page_size};
}

struct Stats {
  map<string, int> word_frequences;

  void operator += (const Stats& other){
	  for(const auto& pair : other.word_frequences){
		  this->word_frequences[pair.first] += pair.second;
	  }
  }
};


Stats ExploreLine(const set<string>& key_words, string_view line) {
	Stats result;
	string temporary;
	size_t prev_pos = 0;
	size_t next_pos = 0;
	while(next_pos != line.npos){
		next_pos = line.find(" ", prev_pos);
		if(next_pos != line.npos){
			temporary = line.substr(prev_pos, next_pos - prev_pos);
			prev_pos = next_pos + 1;
		}
		else{
			temporary = line.substr(prev_pos, line.length());
		}
		if(key_words.count(temporary) != 0){
			result.word_frequences[temporary]++;
		}
	}
	return result;
}

Stats ExploreListOfLines(const set<string>& key_words, IteratorRange<vector<string>::iterator> Range){
	Stats result;
	for(auto it = Range.begin(); it != Range.end(); it++){
		result += ExploreLine(key_words, *it);
	}
	return result;
}

Stats ExploreKeyWordsSingleThread(
  const set<string>& key_words, istream& input
) {
  Stats result;
  for (string line; getline(input, line); ) {
    result += ExploreLine(key_words, line);
  }
  return result;
}

Stats ExploreKeyWords(const set<string>& key_words, istream& input) {
    Stats result;
    size_t num_threads = 4;

    vector<future<Stats>> futures;
    vector<string> strings;
    for(string line; getline(input, line);){
		strings.push_back(move(line));
	}
    size_t size_page = strings.size() / num_threads == 0 ? strings.size() : strings.size() / num_threads;
    auto Pages = Paginate(strings, size_page);
    for(auto lines : Pages){
    	futures.push_back(async(ExploreListOfLines, ref(key_words), lines));
    }
    for(auto& f : futures){
    	result += f.get();
    }
	return result;
}

void TestBasic() {
  const set<string> key_words = {"yangle", "rocks", "sucks", "all"};

  stringstream ss;
  ss << "this new yangle service really rocks\n";
  ss << "It sucks when yangle isn't available\n";
  ss << "10 reasons why yangle is the best IT company\n";
  ss << "yangle rocks others suck\n";
  ss << "Goondex really sucks, but yangle rocks. Use yangle\n";
  const auto stats = ExploreKeyWordsSingleThread(key_words, ss);
  const map<string, int> expected = {
    {"yangle", 6},
    {"rocks", 2},
    {"sucks", 1}
  };
  ASSERT_EQUAL(stats.word_frequences, expected);
}

int main() {
  TestRunner tr;
  RUN_TEST(tr, TestBasic);
  vector<int> k(10000000, 0);
  LOG_DURATION("Normal iterator"){
	  vector<int> n(k.begin(), k.end());
  }
  LOG_DURATION("Make move iterator"){
	  vector<int> m(make_move_iterator(k.begin()), make_move_iterator(k.end()));
  }
	return 0;
}
