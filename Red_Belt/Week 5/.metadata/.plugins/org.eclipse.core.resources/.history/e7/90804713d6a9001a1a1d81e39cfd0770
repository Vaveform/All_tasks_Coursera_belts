#include "test_runner.h"

#include <algorithm>
#include <string>
#include <vector>
#include <set>

using namespace std;

template <typename String>
using Group = vector<String>;

template <typename String>
using Char = typename String::value_type;

template <typename Char>
using Alphabet = set<Char>;

template <typename String>
vector<Group<String>> GroupHeavyStrings(vector<String> strings) {
	vector<Group<String>> result;
	vector<Alphabet<Char<String>>> alphabets;
	for(size_t i = 0; i < strings.size(); i++){
		set<Char<String>> current_alphabet(strings[i].begin(), strings[i].end());
		auto alphabets_iter = find_if(alphabets.begin(), alphabets.end(),[&current_alphabet](auto& elem_of_alphabets){
			return equal(elem_of_alphabets.begin(), elem_of_alphabets.end(), current_alphabet.begin(), current_alphabet.end());
		});
		if(alphabets_iter != alphabets.end()){
			String word;
			word.reserve(strings[i].end() - strings[i].begin());
			result[alphabets.end() - alphabets_iter].push_back(word);
			move(strings[i].begin(), strings[i].end(), word.begin());
		}
		else{
			Alphabet<Char<String>> added_alphabet;
			alphabets.push_back(added_alphabet);
			auto cur_iter = current_alphabet.begin();
			while(cur_iter != current_alphabet.end()){
				(*prev(alphabets.end(), 1)).insert(move(*cur_iter));
				cur_iter++;
			}
			Group<String> new_group;
			result.push_back(new_group);
		}
	}
//	cout << "Result: ";
//	for(size_t i = 0; i < result.size(); i++){
//		cout << result[i] << " ";
//	}
//	cout << "\nStrings: ";
//	for(size_t i = 0; i < strings.size(); i++){
//		cout << strings[i] << " ";
//	}
//	cout << endl;
	return {};
}


void TestGroupingABC() {
  vector<string> strings = {"caab", "abc", "cccc", "bacc", "c"};
  auto groups = GroupHeavyStrings(strings);
  ASSERT_EQUAL(groups.size(), 2);
  sort(begin(groups), end(groups));
  ASSERT_EQUAL(groups[0], vector<string>({"caab", "abc", "bacc"}));
  ASSERT_EQUAL(groups[1], vector<string>({"cccc", "c"}));
}

void TestGroupingReal() {
  vector<string> strings = {"law", "port", "top", "laptop", "pot", "paloalto", "wall", "awl"};
  auto groups = GroupHeavyStrings(strings);
  ASSERT_EQUAL(groups.size(), 4);
  sort(begin(groups), end(groups));
  ASSERT_EQUAL(groups[0], vector<string>({"laptop", "paloalto"}));
  ASSERT_EQUAL(groups[1], vector<string>({"law", "wall", "awl"}));
  ASSERT_EQUAL(groups[2], vector<string>({"port"}));
  ASSERT_EQUAL(groups[3], vector<string>({"top", "pot"}));
}

int main() {
  TestRunner tr;
  RUN_TEST(tr, TestGroupingABC);
  RUN_TEST(tr, TestGroupingReal);
  return 0;
}
