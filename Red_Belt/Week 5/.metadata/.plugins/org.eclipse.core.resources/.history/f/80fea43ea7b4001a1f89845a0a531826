#include "test_runner.h"
#include "profile.h"

#include <map>
#include <string>
#include <functional>
#include <future>
#include <vector>

using namespace std;

template <typename Iterator>
class IteratorRange {
public:
  IteratorRange(Iterator begin, Iterator end)
    : first(begin)
    , last(end)
    , size_(distance(first, last))
  {
  }

  Iterator begin() const {
    return first;
  }

  Iterator end() const {
    return last;
  }

  size_t size() const {
    return size_;
  }

private:
  Iterator first, last;
  size_t size_;
};

template <typename Iterator>
class Paginator {
private:
  vector<IteratorRange<Iterator>> pages;

public:
  Paginator(Iterator begin, Iterator end, size_t page_size)
  {
    for (size_t left = distance(begin, end); left > 0; )
    {
      size_t current_page_size = min(page_size, left);
      Iterator current_page_end = next(begin, current_page_size);
      pages.push_back({begin, current_page_end});

      left -= current_page_size;
      begin = current_page_end;
    }
  }

  auto begin() const {
    return pages.begin();
  }

  auto end() const {
    return pages.end();
  }

  size_t size() const {
    return pages.size();
  }
};

template <typename C>
auto Paginate(C& c, size_t page_size) {
  return Paginator<typename C::const_iterator>(begin(c), end(c), page_size);
}

struct Stats
{
  map<string, int> word_frequences;

  void operator += (const Stats& other)
  {
    for (const auto& item: other.word_frequences)
    {
      word_frequences[item.first] += item.second;
    }
  }
};

Stats ExploreLine(const set<string>& key_words, const string& line)
{
  Stats result;
  string current_word;
  bool is_ended = false;
  for (char c: line)
  {
    if (c != ' ')
    {
      is_ended = false;
      current_word.push_back(c);
    }
    else if (c == ' ' && is_ended == false)
    {
      is_ended = true;
      if (key_words.count(current_word) != 0)
      {
        ++result.word_frequences[current_word];
      }
      current_word.clear();
    }
  }

  if (key_words.count(current_word) != 0)
  {
    ++result.word_frequences[current_word];
  }
  return result;
}

Stats ExploreKeyWordsSingleThread(const set<string>& key_words, istream& input)
{
  Stats result;
  for (string line; getline(input, line); )
  {
    result += ExploreLine(key_words, line);
  }
  return result;
}

Stats ExploreKeyWordsSingleThreadForVector(const set<string>& key_words,
                                            const vector<string>& sentences)
{
  Stats result;
  for (const auto& sentence: sentences)
  {
    result += ExploreLine(key_words, sentence);
  }
  return result;
}


Stats ExploreKeyWords(const set<string>& key_words, istream& input)
{
  Stats result;
  vector<string> all_sentences;
  size_t num_threads = 4;
  vector<future<Stats>> futures;
  for (string line; getline(input, line); )
  {
    all_sentences.push_back(move(line));
  }
  auto Pages = Paginate(all_sentences, all_sentences.size() / num_threads == 0 ? all_sentences.size() : all_sentences.size() / num_threads);
  for (auto sentences : Pages)
  {
    vector<string> page = {sentences.begin(), sentences.end()};
    futures.push_back(async(ExploreKeyWordsSingleThreadForVector, key_words, page));
  }

  for (auto& fut: futures)
  {
    result += fut.get();
  }
  return result;
}

int NPAGES = 50000;
int PAGE_SIZE = 20;

stringstream GetInput()
{
  stringstream ss;
  for (int j = 0; j < NPAGES*PAGE_SIZE; ++j)
  {
    if ((j+1)%PAGE_SIZE == 0)
    {
      ss << "\n";
    }
    ss << to_string(j) + " ";
  }
  return ss;
}

set<string> GetKeyWords()
{
  set<string> KeyWords;
  for (int j = 0; j < NPAGES*PAGE_SIZE; ++j)
  {
    if (j%PAGE_SIZE == 1)
    {
      KeyWords.insert(to_string(j));
    }
  }
  return KeyWords;
}

void TestBasic()
{
  const set<string> key_words = GetKeyWords();

  stringstream ss1 = GetInput();
  stringstream ss2 = GetInput();

  map<string, int> expected;
  for (int i = 0; i < NPAGES*PAGE_SIZE; ++i)
  {
    if (i%PAGE_SIZE == 1)
    expected[to_string(i)] = 1;
  }

  {
    LOG_DURATION("Single thread");
    const auto stats = ExploreKeyWordsSingleThread(key_words, ss2);
    ASSERT_EQUAL(stats.word_frequences, expected);
  }

  {
    LOG_DURATION("Multi thread");
    const auto stats = ExploreKeyWords(key_words, ss1);
    ASSERT_EQUAL(stats.word_frequences, expected);
  }
}

int main()
{
  TestRunner tr;
  RUN_TEST(tr, TestBasic);
}
