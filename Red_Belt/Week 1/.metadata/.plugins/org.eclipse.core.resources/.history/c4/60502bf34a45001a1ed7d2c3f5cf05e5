#include "test_runner.h"

#include <iostream>
#include <vector>
#include <exception>
#include <stdexcept>

using namespace std;

template <typename Type> class Deque{
public:
	vector<Type> back;
	vector<Type> front;
	Deque(){
		back.resize(0);
		front.resize(0);
	}
	bool Empty() const{
		return back.empty() && front.empty() ? true : false;
	}
	int Size() const{
		return back.size() + front.size();
	}
	Type& operator[](size_t index){
		if(index < front.size() - 1){
			return front[index];
		}
		else{
			return back[index];
		}
	}
	const Type& operator[](size_t index) const {
		return operator[](index);
	}
	Type& At(size_t index){
		if(index > back.size() - 1){
			throw(out_of_range("Out of range"));
		}
		else{
			return operator[](index);
		}
	}
	const Type& At(size_t index) const{
		return At(index);
	}
	Type& Front(){
		return front.back();
	}
	const Type& Front(){
		return front.back();
	}
	Type& Back(){
		return back.back();
	}
	const Type& Back(){
		return back.back();
	}
	void PushFront(Type elem){
		front.push_back(elem);
	}
	void PushBack(Type elem){
		back.push_back(elem);
	}
};


int main() {
	Deque<int> d;
	cout << d.Empty() << " " << d.Size() << endl;
	return 0;
}
