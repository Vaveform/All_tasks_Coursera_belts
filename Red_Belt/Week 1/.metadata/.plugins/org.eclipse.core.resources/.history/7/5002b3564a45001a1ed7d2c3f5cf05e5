#include <iostream>
#include <vector>
#include <exception>
#include <stdexcept>

using namespace std;

template <typename Type> class Deque{
public:
	vector<Type> Back;
	vector<Type> Front;
	Deque(){
		Back.resize(0);
		Front.resize(0);
	}
	bool Empty() const{
		return Back.empty() && Front.empty() ? true : false;
	}
	int Size() const{
		return Back.size() + Front.size();
	}
	Type& operator[](size_t index){
		if(index < Front.size() - 1){
			return Front[index];
		}
		else{
			return Back[index];
		}
	}
	const Type& operator[](size_t index) const {
		return operator[](index);
	}
	Type& At(size_t index){
		if(index > Back.size() - 1){
			throw(out_of_range)
		}
	}
};


int main() {
	Deque<int> d;
	cout << d.Empty() << " " << d.Size() << endl;
	return 0;
}
